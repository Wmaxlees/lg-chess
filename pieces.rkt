#lang racket

(require math/matrix)

(provide PAWN
         ROOK
         KNIGHT
         BISHOP
         QUEEN
         KING
         getName
         getValue
         getMoves)

(define PAWN 0)
(define ROOK 1)
(define KNIGHT 2)
(define BISHOP 3)
(define QUEEN 4)
(define KING 5)

(define (getName piece)
  (case piece
    [(0) "Pawn"]
    [(1) "Rook"]
    [(2) "Knight"]
    [(3) "Bishop"]
    [(4) "Queen"]
    [(5) "King"]
    [else "FAIL"]))

(define (getValue piece)
  (case piece
    [(0) 1]
    [(1) 5]
    [(2 3) 3]
    [(4) 9]
    [(5) 255]
    [else "FAIL"]))

(define pawnMoves
  (matrix [[7 7 7 7 7 7 7 7 7 7 7 7 7 7 7]
           [0 6 6 6 6 6 6 6 6 6 6 6 6 6 0]
           [0 0 5 5 5 5 5 5 5 5 5 5 5 0 0]
           [0 0 0 4 4 4 4 4 4 4 4 4 0 0 0]
           [0 0 0 0 3 3 3 3 3 3 3 0 0 0 0]
           [0 0 0 0 0 2 2 2 2 2 0 0 0 0 0]
           [0 0 0 0 0 0 1 1 1 0 0 0 0 0 0]
           [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
           [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
           [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
           [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
           [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
           [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
           [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
           [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]))

(define rookMoves
  (matrix [[2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]
           [2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]
           [2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]
           [2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]
           [2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]
           [2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]
           [2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]
           [1 1 1 1 1 1 1 2 1 1 1 1 1 1 1]
           [2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]
           [2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]
           [2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]
           [2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]
           [2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]
           [2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]
           [2 2 2 2 2 2 2 1 2 2 2 2 2 2 2]]))

(define knightMoves
  (matrix [[6 5 4 5 4 5 4 5 4 5 4 5 4 5 6]
           [5 4 5 4 3 4 3 4 3 4 3 4 5 4 5]
           [4 5 4 3 4 3 4 3 4 3 4 3 4 5 4]
           [5 4 3 4 3 2 3 2 3 2 3 4 3 4 5]
           [4 3 4 3 2 3 2 3 2 3 2 3 4 3 4]
           [5 4 3 2 3 4 1 2 1 4 3 2 3 4 5]
           [4 3 4 3 2 1 2 3 2 1 2 3 4 3 4]
           [5 4 3 2 3 2 3 2 3 2 3 2 3 4 5]
           [4 3 4 3 2 1 2 3 2 1 2 3 4 3 4]
           [5 4 3 2 3 4 1 2 1 4 3 2 3 4 5]
           [4 3 4 3 2 3 2 3 2 3 2 3 4 3 4]
           [5 4 3 4 3 2 3 2 3 2 3 4 3 4 5]
           [4 5 4 3 4 3 4 3 4 3 4 3 4 5 4]
           [5 4 5 4 3 4 3 4 3 4 3 4 5 4 5]
           [6 5 4 5 4 5 4 5 4 5 4 5 4 5 6]]))

(define bishopMoves
  (matrix [[1 0 2 0 2 0 2 0 2 0 2 0 2 0 1]
           [0 1 0 2 0 2 0 2 0 2 0 2 0 1 0]
           [2 0 1 0 2 0 2 0 2 0 2 0 1 0 2]
           [0 2 0 1 0 2 0 2 0 2 0 1 0 2 0]
           [2 0 2 0 1 0 2 0 2 0 1 0 2 0 2]
           [0 2 0 2 0 1 0 2 0 1 0 2 0 2 0]
           [2 0 2 0 2 0 1 0 1 0 2 0 2 0 2]
           [0 2 0 2 0 2 0 2 0 2 0 2 0 2 0]
           [2 0 2 0 2 0 1 0 1 0 2 0 2 0 2]
           [0 2 0 2 0 1 0 2 0 1 0 2 0 2 0]
           [2 0 2 0 1 0 2 0 2 0 1 0 2 0 2]
           [0 2 0 1 0 2 0 2 0 2 0 1 0 2 0]
           [2 0 1 0 2 0 2 0 2 0 2 0 1 0 2]
           [0 1 0 2 0 2 0 2 0 2 0 2 0 1 0]
           [1 0 2 0 2 0 2 0 2 0 2 0 2 0 1]]))

(define queenMoves
  (matrix [[1 2 2 2 2 2 2 1 2 2 2 2 2 2 1]
           [2 1 2 2 2 2 2 1 2 2 2 2 2 1 2]
           [2 2 1 2 2 2 2 1 2 2 2 2 1 2 2]
           [2 2 2 1 2 2 2 1 2 2 2 1 2 2 2]
           [2 2 2 2 1 2 2 1 2 2 1 2 2 2 2]
           [2 2 2 2 2 1 2 1 2 1 2 2 2 2 2]
           [2 2 2 2 2 2 1 1 1 2 2 2 2 2 2]
           [1 1 1 1 1 1 1 2 1 1 1 1 1 1 1]
           [2 2 2 2 2 2 1 1 1 2 2 2 2 2 2]
           [2 2 2 2 2 1 2 1 2 1 2 2 2 2 2]
           [2 2 2 2 1 2 2 1 2 2 1 2 2 2 2]
           [2 2 2 1 2 2 2 1 2 2 2 1 2 2 2]
           [2 2 1 2 2 2 2 1 2 2 2 2 1 2 2]
           [2 1 2 2 2 2 2 1 2 2 2 2 2 1 2]
           [1 2 2 2 2 2 2 1 2 2 2 2 2 2 1]]))

(define kingMoves
  (matrix [[7 7 7 7 7 7 7 7 7 7 7 7 7 7 7]
           [7 6 6 6 6 6 6 6 6 6 6 6 6 6 7]
           [7 6 5 5 5 5 5 5 5 5 5 5 5 6 7]
           [7 6 5 4 4 4 4 4 4 4 4 4 5 6 7]
           [7 6 5 4 3 3 3 3 3 3 3 4 5 6 7]
           [7 6 5 4 3 2 2 2 2 2 3 4 5 6 7]
           [7 6 5 4 3 2 1 1 1 2 3 4 5 6 7]
           [7 6 5 4 3 2 1 2 1 2 3 4 5 6 7]
           [7 6 5 4 3 2 1 1 1 2 3 4 5 6 7]
           [7 6 5 4 3 2 2 2 2 2 3 4 5 6 7]
           [7 6 5 4 3 3 3 3 3 3 3 4 5 6 7]
           [7 6 5 4 4 4 4 4 4 4 4 4 5 6 7]
           [7 6 5 5 5 5 5 5 5 5 5 5 5 6 7]
           [7 6 6 6 6 6 6 6 6 6 6 6 6 6 7]
           [7 7 7 7 7 7 7 7 7 7 7 7 7 7 7]]))

(define (getMoves piece)
  (case piece
    [(0) pawnMoves]
    [(1) rookMoves]
    [(2) knightMoves]
    [(3) bishopMoves]
    [(4) queenMoves]
    [(5) kingMoves]
    [else "FAIL"]))